<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ctownsen357@github.io</title>
    <link>http://ctownsen357.github.io/posts/index.xml</link>
    <description>Recent content in Posts on ctownsen357@github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Sun, 08 Jan 2017 17:08:34 -0500</lastBuildDate>
    <atom:link href="http://ctownsen357.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Compiled R</title>
      <link>http://ctownsen357.github.io/posts/compiled-r/</link>
      <pubDate>Sun, 08 Jan 2017 17:08:34 -0500</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/compiled-r/</guid>
      <description>

&lt;p&gt;While investigating ways to make some R code more performant I came across the compiler package.  This package allows one to compile functions and/or entire files into compiled bytecode.  Alternatively one may also enable just-in-time compilation.  In my use case with Rserve the JIT compilation options actually made performance worse because each session was recompiling everything rather than sharing compiled source.  In my case the way forward was to compile the files into bytecode so they were precompiled manually and available as bytecode files.&lt;/p&gt;

&lt;h2 id=&#34;just-in-time-compile&#34;&gt;Just-in-time Compile&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;library(compiler)
enableJIT(3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The options for JIT are 0 through 3, inicating no JIT through the max level where everything possible is compiled before first use.&lt;/p&gt;

&lt;h2 id=&#34;compiling-functions&#34;&gt;Compiling functions&lt;/h2&gt;
library(compiler)
myfoo &lt;- function(){
    seq(1:5)
}

compiledfoo &lt;- cmpfun(myfoo)

&lt;p&gt;That example is not going to yield any performance benefit because seq is already compiled but it demonstrates HOW to compile a function.  My experience was that it is about 2-3 times faster and is most helpful for a function that gets called multiple times.&lt;/p&gt;

&lt;h2 id=&#34;compiling-an-entire-r-file&#34;&gt;Compiling an entire R file&lt;/h2&gt;
library(compiler)
cmpfile(infile=&#39;&lt;path_to_file&gt;.R&#39;)

&lt;p&gt;This will compile the entire R file down to bytecode in the same location with an extension of .Rc  This compiled file may then be sourced in other R files and the performance benefits I saw were highly dependent on the types of routines being called.&lt;/p&gt;

&lt;h2 id=&#34;sourcing-your-newly-compiled-r-file&#34;&gt;Sourcing your newly compiled R file&lt;/h2&gt;
library(compiler)

loadcmp(&#39;&lt;path/to/compiled/file&gt;.Rc&#39;)
# call all of your functions as you normally would
</description>
    </item>
    
    <item>
      <title>R and ff, and many columns! Oh my!</title>
      <link>http://ctownsen357.github.io/posts/r-ff-many-columns/</link>
      <pubDate>Fri, 02 Dec 2016 10:28:40 -0500</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/r-ff-many-columns/</guid>
      <description>

&lt;p&gt;Recently, I was experimenting with a data set in R that ended up being more challenging than I first expected.  It really wasn&amp;rsquo;t that large as far as size on disk or memory(single instance) was concerned but it had over 3,000 columns.&lt;/p&gt;

&lt;p&gt;At first I didn&amp;rsquo;t think it was that big of a deal and it wouldn&amp;rsquo;t be if one only needed a single instance of the ~ 750MB file in memory.  What if you have a web application that instantiates that data set on a server for each user and you have many concurrent users? All of a sudden that 750MB and any operations on that data can quickly exhaust available RAM.&lt;/p&gt;

&lt;p&gt;I looked at the bigmemory package because it looked promising and contained some tech under the hood that I&amp;rsquo;ve used: memory mapped files and shared memory via the C++ boost libraries.  That combination allows a single instance of a matrix to be accessed by multiple processes.  The problem with that ended up being that the dat set was not a matrix of uniform type but mixed types.  Enter the ff and ffbase packages!&lt;/p&gt;

&lt;p&gt;The ff package provides data structures that are stored on disk but behave (almost) as if they were in RAM by transparently mapping only a section (pagesize) in main memory - the effective virtual memory consumption per ff object.&lt;/p&gt;

&lt;p&gt;I loaded the original data frame and tried to cast it to an ffdf (ff data frame):&lt;/p&gt;
require(ffbase)
load(&#39;./35509-0001-Data.rda&#39;)
testffdf &lt;- as.ffdf(da35509.0001, vmode = NULL)
save.ffdf(testffdf, dir=&#34;./testdf&#34;, relative=TRUE)

&lt;p&gt;It failed silently.  I looked in the &lt;code&gt;./testdf&lt;/code&gt; and nothing.  Ugh, what appeared so promising now looked bleak!&lt;/p&gt;

&lt;p&gt;After some additional tinkering, I received an actual error.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Error en  ff(initdata = initdata, length = length, levels = levels, ordered = ordered,  : 
   write error

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Not very descriptive but it was something to go on.  After some searching &lt;a href=&#34;http://stackoverflow.com/questions/14025202/ff-package-write-error&#34;&gt;I came across this thread on stackoverflow.&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The answers were not entirely helpful but they did discuss that each column in an ff data frame are stored in distinct files.  Bingo! I&amp;rsquo;ve encountered bumping into exceeding the max number of files open on a system before and it is a very simple fix.  Keep in mind the file limits are in place to prevent resource exhaustion on the system.  Those limits are set VERY conservatively though.  Increasing the limits is as simple as the following:&lt;/p&gt;

&lt;h3 id=&#34;linux&#34;&gt;Linux:&lt;/h3&gt;

&lt;p&gt;Add the following to your &lt;code&gt;/etc/security/limits.conf&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;youruserid  hard  nofile 100000 # you may enter whatever number you wish here
youruserid  soft  nofile  10000 # whatever you want the default to be for each shell or process you have running
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;os-x&#34;&gt;OS X:&lt;/h3&gt;

&lt;p&gt;Add or edit the following in your &lt;code&gt;/etc/sysctl.con&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kern.maxfilesperproc=166384
kern.maxfiles=8192
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You&amp;rsquo;ll need to log out and log back in for the change to take effect.  After that change, one may use the ff data frame with up to the number of columns you specified in your &lt;code&gt;limits.conf&lt;/code&gt; or &lt;code&gt;sysctl.con&lt;/code&gt; file.&lt;/p&gt;

&lt;p&gt;Now I&amp;rsquo;m able to load  what was 750MB per data frame instance as a ffdf and only consume ~ 11MB of RAM per instance.  Many parallel instances of the R routines using this data may be run without exhausting available RAM.  Keep in mind that you&amp;rsquo;ll want to tweak your max open file settings to account for expected concurrent use.&lt;/p&gt;

&lt;p&gt;You can test this by opening up a new R session, changing directories to where you were working previously and loading the ffdf from disk:&lt;/p&gt;
required(ffbase)
load.ffdf(&#39;./testdf&#39;)

&lt;p&gt;Your should now have an instance of the original testffdf object.&lt;/p&gt;

&lt;p&gt;A helpful presentation on the ff and ffbase packages is &lt;a href=&#34;http://ff.r-forge.r-project.org/ff&amp;amp;bit_UseR!2009.pdf&#34;&gt;available here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GlusterFS &amp; Docker</title>
      <link>http://ctownsen357.github.io/posts/glusterfs-docker/</link>
      <pubDate>Tue, 08 Nov 2016 16:28:48 -0500</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/glusterfs-docker/</guid>
      <description>

&lt;p&gt;I&amp;rsquo;ve recently started exploring &lt;a href=&#34;https://www.gluster.org/&#34;&gt;GlusterFS&lt;/a&gt; in Docker containers to use as persistent storage for the Dockerized services and applications I&amp;rsquo;ve been working on.  If this is performant enough then for my purposes it will close the gap for me to really treat the data center as one giant computer.  Getting started was pretty straight forward.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This is a quick example.  Make sure you read up on security, changing the default password, and review the original Dockerfile.  I&amp;rsquo;ll be experimenting with running this out on AWS soon and should be able to further tighten up my example.&lt;/p&gt;

&lt;h3 id=&#34;get-the-latest-gluster-container&#34;&gt;Get the latest Gluster container:&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/gluster/gluster-containers&#34;&gt;Get the latest container:&lt;/a&gt;&lt;/p&gt;
docker pull gluster/gluster-centos

&lt;h3 id=&#34;make-the-persistent-data-folders-on-each-host&#34;&gt;Make the persistent data folders on each host:&lt;/h3&gt;
sudo mkdir -p /gluster/logs &amp;&amp; sudo mkdir /gluster/data &amp;&amp; sudo mkdir /gluster/config &amp;&amp; /gluster/mnt

&lt;h3 id=&#34;start-a-glusterfs-container-on-each-host&#34;&gt;Start a GlusterFS container on each host:&lt;/h3&gt;
docker run -d \
   --name gluster \
   --privileged \
   --net=host \
   -v /gluster/data:/gluster \
   -v /gluster/logs:/var/log/glusterfs \
   -v /gluster/config:/var/lib/glusterd \
   -v /gluster/mnt:/gluster/mnt \
   gluster/gluster-centos

&lt;h3 id=&#34;probe-the-hosts-in-the-cluster&#34;&gt;Probe the hosts in the cluster:&lt;/h3&gt;

&lt;p&gt;For each container on each host you&amp;rsquo;ll want to execute this to get them aware of the other peers.  If running out on AWS these steps could be orchestrated through the init system on the hosts so you don&amp;rsquo;t have to log into each machine.&lt;/p&gt;
gluster peer probe 1.1.1.1

&lt;h3 id=&#34;now-create-your-volume-and-start-it&#34;&gt;Now create your volume and start it:&lt;/h3&gt;
gluster volume create media replica 3 transport tcp 172.30.0.185:/gluster/data  172.30.0.186:/gluster/data 172.30.0.30:/
gluster volume start media

&lt;p&gt;In this example I&amp;rsquo;m replicating across each of three servers but depending on your needs you could: distributed striped, distributed, replicated, distributed striped replicated, &amp;hellip; know what and why.&lt;/p&gt;

&lt;h3 id=&#34;mount-the-volume&#34;&gt;Mount the volume&lt;/h3&gt;

&lt;p&gt;The docs made a big deal out of mounting the volume.  I suspect if you were doing anything other than replicating that would become very important.&lt;/p&gt;

&lt;p&gt;You&amp;rsquo;ll want to do this on each host, using its internal ip:&lt;/p&gt;
mount -t glusterfs 172.30.0.186:/media /gluster/mnt

&lt;p&gt;From one of the hosts testing with a write statement to the volume:&lt;/p&gt;
echo &#34;testing, 1,2,3...&#34; &gt;&gt; /gluster/mnt/test.txt

&lt;p&gt;And from another host you should be able to read/write to the same document.  One could then launch containers on any host with a mount to /gluster/mnt to store data.  Then it would have access to the data no matter which node it was launched on.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Manual CoreOS Update</title>
      <link>http://ctownsen357.github.io/posts/manual-coreos-update/</link>
      <pubDate>Thu, 03 Nov 2016 17:00:49 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/manual-coreos-update/</guid>
      <description>&lt;p&gt;This forces a manual update if one is available:&lt;/p&gt;
update_engine_client -update
</description>
    </item>
    
    <item>
      <title>Argument List Too Long</title>
      <link>http://ctownsen357.github.io/posts/argument-list-too-log/</link>
      <pubDate>Tue, 01 Nov 2016 15:47:38 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/argument-list-too-log/</guid>
      <description>&lt;p&gt;You know it before you even try.  You try anyway.  Something like trying to bzip2  316,387 CSV files representing ~ 10TB of data.  You know it will be at least &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt; the size and R can handle the bzip2 files directly so you call bzip2 and get the argument list too long error.&lt;/p&gt;

&lt;p&gt;Find and xargs to the rescue!  Also, lbzip2 because you really don&amp;rsquo;t want to wait on bzip2 any more than you have to.&lt;/p&gt;

find path_to_files/ -name &#34;*.csv&#34; | xargs -P 5 lbzip2


&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you&amp;rsquo;ll want to balance the number of parallel lbzip2 instances (or whatever you are running) as indicated by -P 5 above, balance that with the fact that lbzip2 runs in parallel too.&lt;/p&gt;

&lt;p&gt;It still took a long time to compress 316,387 files but it went a whole lot faster with parallel instances of parallel bzip2 using the xargs -P flag.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CoreOS Mount NTFS Share</title>
      <link>http://ctownsen357.github.io/posts/coreos-mount-ntfs-share/</link>
      <pubDate>Tue, 01 Nov 2016 14:12:12 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/coreos-mount-ntfs-share/</guid>
      <description>&lt;p&gt;I had the need to mount an NTFS share for an application that was connecting to a SQL Server database and required that a share be mapped.  While testing from my CentOS 7 desktop, creating the share was trivial.  Not so much once I transitioned over to a CoreOS machine where I was to deploy for user testing.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; I map /opt/bin from the host to a folder in the container.  I store custom binaries and scripts in /opt/bin on CoreOS as it is in the path and persists even after CoreOS updates to the latest version.  I&amp;rsquo;ve also changed the example from a Fedora container to CentOS as CentOS already has items installed that the example I link to installed in addition to the dev tools and libraries.&lt;/p&gt;

&lt;p&gt;This is how I got around that problem:&lt;/p&gt;
docker run -t -i -v /opt/bin:/host_tmp centos /bin/bash
yum groupinstall -y &#34;Development Tools&#34; &#34;Development Libraries&#34;

curl https://download.samba.org/pub/linux-cifs/cifs-utils/cifs-utils-6.3.tar.bz2 | bunzip2 -c - | tar -xvf -
cd cifs-utils-6.3/
./configure &amp;&amp; make
cp mount.cifs /host_tmp/
exit

sudo mkdir /media/foo
sudo mount.cifs &#34;//1.1.1.1/ntfs_share&#34; -o username=winuser,domain=mydomain.com,rw,dir_mode=0775,noperm /media/foo/ 

&lt;p&gt;Originally &lt;a href=&#34;https://gist.github.com/pantelis/540a19262cacc841fb0a&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitor Docker Events with Awk</title>
      <link>http://ctownsen357.github.io/posts/awk-mon/</link>
      <pubDate>Tue, 01 Nov 2016 09:38:04 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/awk-mon/</guid>
      <description>&lt;p&gt;I recently wrote a Docker event monitor in Go as an excercise to demonstrate some proficiency in Go and Docker.  Before getting started I was thinking about how it could be done with piping, bash, and awk.  It was actually really easy to do.  Some of the excercise requirements were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The service should monitor the Docker API for restart events&lt;/li&gt;
&lt;li&gt;The service should run an arbitrary command in response to that event.&lt;/li&gt;
&lt;li&gt;The arbitrary command should be supplied via a config file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pipe, bash, awk solution:&lt;/p&gt;
echo &#39; pwd&#39; &gt; cmd.txt &amp;&amp; docker events | awk &#39;/container restart/{system(&#34;echo docker exec &#34; $4 &#34; $(cat cmd.txt) | bash -&#34;)}&#39;

&lt;p&gt;This pipes the pwd command into a file and then pipes the stream from docker events into awk which is searching for the restart event.  When the restart event is encountered it executes the arbitrary command from the text file against the restarted container.  The command in the text file could be replaced with any desired command.&lt;/p&gt;

&lt;p&gt;There were other requirements that made it interesting to think through in Go.  I&amp;rsquo;ll be posting the entire excercise and my code soon.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>control&#43;r</title>
      <link>http://ctownsen357.github.io/posts/control-r/</link>
      <pubDate>Tue, 01 Nov 2016 09:32:58 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/control-r/</guid>
      <description>ctl+r...

&lt;p&gt;Control plus r and start typing part of a command you want to recall - searches the history from the terminal.  This is an old but good one.  Even after several years of doing command line work I still use this one fondly as it took several years of work prior to discovering this trick to stumble upon it!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>port forwarding</title>
      <link>http://ctownsen357.github.io/posts/port-forwarding/</link>
      <pubDate>Mon, 31 Oct 2016 21:11:01 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/port-forwarding/</guid>
      <description>ssh -NL 3389:internal.network.ip.address:3389 user@public.ip.address

&lt;p&gt;In this example I&amp;rsquo;m forwarding an RDP connection to a machine on some internal network IP address through a public facing SSH server.  I&amp;rsquo;ve found this sort of tunelling through SSH to be invaluable and I&amp;rsquo;ve used it for everything from accessing Windows servers over RDP where the only external access was a key protected SSH server to forwarding http/https traffic to remote APIs for testing and debugging.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Post with a Background Image</title>
      <link>http://ctownsen357.github.io/posts/background-image/</link>
      <pubDate>Sat, 26 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/background-image/</guid>
      <description>&lt;p&gt;Here be a sample post with a custom background image. To utilize this &amp;ldquo;feature&amp;rdquo; just add the following YAML to a post&amp;rsquo;s front matter.&lt;/p&gt;
background: /images/filename.png

&lt;p&gt;This little bit of YAML makes the assumption that your background image asset is in the &lt;code&gt;/images&lt;/code&gt; folder. If you place it somewhere else or are hotlinking from the web, just include the full http(s):// URL. Either way you should have a background image that is tiled.&lt;/p&gt;

&lt;p&gt;If you want to set a background image for the entire site just add &lt;code&gt;background: /images/filename.png&lt;/code&gt; as a &lt;a href=&#34;https://gohugo.io/overview/configuration/#examples&#34;&gt;param&lt;/a&gt; in your config and BOOM &amp;mdash; background images on every page!&lt;/p&gt;

&lt;div xmlns:cc=&#34;http://creativecommons.org/ns#&#34; xmlns:dct=&#34;http://purl.org/dc/terms/&#34; about=&#34;http://subtlepatterns.com&#34; class=&#34;notice&#34;&gt;Background images from &lt;span property=&#34;dct:title&#34;&gt;Subtle Patterns&lt;/span&gt; (&lt;a rel=&#34;cc:attributionURL&#34; property=&#34;cc:attributionName&#34; href=&#34;http://subtlepatterns.com&#34;&gt;Subtle Patterns&lt;/a&gt;) / &lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-sa/3.0/&#34;&gt;CC BY-SA 3.0&lt;/a&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Syntax Highlighting Post</title>
      <link>http://ctownsen357.github.io/posts/code-highlighting-post/</link>
      <pubDate>Fri, 16 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/code-highlighting-post/</guid>
      <description>

&lt;p&gt;Syntax highlighting is a feature that displays source code, in different colors and fonts according to the category of terms. This feature facilitates writing in a structured language such as a programming language or a markup language as both structures and syntax errors are visually distinct. Highlighting does not affect the meaning of the text itself; it is intended only for human readers.&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;h3 id=&#34;highlighted-code-blocks&#34;&gt;Highlighted Code Blocks&lt;/h3&gt;

&lt;p&gt;To modify styling and highlight colors edit &lt;code&gt;/static/css/_sass/_syntax.scss&lt;/code&gt;.&lt;/p&gt;
#container {
    float: left;
    margin: 0 -240px 0 0;
    width: 100%;
}
&lt;nav class=&#34;pagination&#34; role=&#34;navigation&#34;&gt;
    {% if page.previous %}
        &lt;a href=&#34;{{ site.url }}{{ page.previous.url }}&#34; class=&#34;btn&#34; title=&#34;{{ page.previous.title }}&#34;&gt;Previous article&lt;/a&gt;
    {% endif %}
    {% if page.next %}
        &lt;a href=&#34;{{ site.url }}{{ page.next.url }}&#34; class=&#34;btn&#34; title=&#34;{{ page.next.title }}&#34;&gt;Next article&lt;/a&gt;
    {% endif %}
&lt;/nav&gt;&lt;!-- /.pagination --&gt;
module Jekyll
  class TagIndex &lt; Page
    def initialize(site, base, dir, tag)
      @site = site
      @base = base
      @dir = dir
      @name = &#39;index.html&#39;
      self.process(@name)
      self.read_yaml(File.join(base, &#39;_layouts&#39;), &#39;tag_index.html&#39;)
      self.data[&#39;tag&#39;] = tag
      tag_title_prefix = site.config[&#39;tag_title_prefix&#39;] || &#39;Tagged: &#39;
      tag_title_suffix = site.config[&#39;tag_title_suffix&#39;] || &#39;–&#39;
      self.data[&#39;title&#39;] = &#34;#{tag_title_prefix}#{tag}&#34;
      self.data[&#39;description&#39;] = &#34;An archive of posts tagged #{tag}.&#34;
    end
  end
end

&lt;h3 id=&#34;standard-code-block&#34;&gt;Standard Code Block&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;nav class=&amp;quot;pagination&amp;quot; role=&amp;quot;navigation&amp;quot;&amp;gt;
    {% if page.previous %}
        &amp;lt;a href=&amp;quot;{{ site.url }}{{ page.previous.url }}&amp;quot; class=&amp;quot;btn&amp;quot; title=&amp;quot;{{ page.previous.title }}&amp;quot;&amp;gt;Previous article&amp;lt;/a&amp;gt;
    {% endif %}
    {% if page.next %}
        &amp;lt;a href=&amp;quot;{{ site.url }}{{ page.next.url }}&amp;quot; class=&amp;quot;btn&amp;quot; title=&amp;quot;{{ page.next.title }}&amp;quot;&amp;gt;Next article&amp;lt;/a&amp;gt;
    {% endif %}
&amp;lt;/nav&amp;gt;&amp;lt;!-- /.pagination --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;fenced-code-blocks&#34;&gt;Fenced Code Blocks&lt;/h3&gt;

&lt;p&gt;To modify styling and highlight colors edit &lt;code&gt;/static/css/_sass/_coderay.scss&lt;/code&gt;.&lt;/p&gt;
#container {
    float: left;
    margin: 0 -240px 0 0;
    width: 100%;
}
&lt;nav class=&#34;pagination&#34; role=&#34;navigation&#34;&gt;
    {% if page.previous %}
        &lt;a href=&#34;{{ site.url }}{{ page.previous.url }}&#34; class=&#34;btn&#34; title=&#34;{{ page.previous.title }}&#34;&gt;Previous article&lt;/a&gt;
    {% endif %}
    {% if page.next %}
        &lt;a href=&#34;{{ site.url }}{{ page.next.url }}&#34; class=&#34;btn&#34; title=&#34;{{ page.next.title }}&#34;&gt;Next article&lt;/a&gt;
    {% endif %}
&lt;/nav&gt;&lt;!-- /.pagination --&gt;
module Jekyll
  class TagIndex &lt; Page
    def initialize(site, base, dir, tag)
      @site = site
      @base = base
      @dir = dir
      @name = &#39;index.html&#39;
      self.process(@name)
      self.read_yaml(File.join(base, &#39;_layouts&#39;), &#39;tag_index.html&#39;)
      self.data[&#39;tag&#39;] = tag
      tag_title_prefix = site.config[&#39;tag_title_prefix&#39;] || &#39;Tagged: &#39;
      tag_title_suffix = site.config[&#39;tag_title_suffix&#39;] || &#39;–&#39;
      self.data[&#39;title&#39;] = &#34;#{tag_title_prefix}#{tag}&#34;
      self.data[&#39;description&#39;] = &#34;An archive of posts tagged #{tag}.&#34;
    end
  end
end

&lt;h3 id=&#34;github-gist-embed&#34;&gt;GitHub Gist Embed&lt;/h3&gt;

&lt;p&gt;An example of a Gist embed below.&lt;/p&gt;

&lt;script src=&#34;https://gist.github.com/mmistakes/43a355923921d22cd993.js&#34;&gt;&lt;/script&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://en.wikipedia.org/wiki/Syntax_highlighting&#34;&gt;http://en.wikipedia.org/wiki/Syntax_highlighting&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Sample Link Post</title>
      <link>http://ctownsen357.github.io/posts/sample-link-post/</link>
      <pubDate>Mon, 12 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/sample-link-post/</guid>
      <description>&lt;p&gt;This theme supports &lt;strong&gt;link posts&lt;/strong&gt;, made famous by John Gruber. To use, just add &lt;code&gt;link: http://url-you-want-linked&lt;/code&gt; to the post&amp;rsquo;s YAML front matter and you&amp;rsquo;re done.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Post with a Video</title>
      <link>http://ctownsen357.github.io/posts/video-post/</link>
      <pubDate>Tue, 25 Jun 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/video-post/</guid>
      <description>&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/SU3kYxJmWuQ&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;

&lt;p&gt;Video embeds are responsive and scale with the width of the main content block with the help of &lt;a href=&#34;http://fitvidsjs.com/&#34;&gt;FitVids&lt;/a&gt;.&lt;/p&gt;
&lt;iframe width=&#34;560&#34; height=&#34;315&#34; src=&#34;//www.youtube.com/embed/SU3kYxJmWuQ&#34; frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
</description>
    </item>
    
    <item>
      <title>Post with Large Feature Image and Text</title>
      <link>http://ctownsen357.github.io/posts/readability-feature-post/</link>
      <pubDate>Thu, 23 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/readability-feature-post/</guid>
      <description>

&lt;p&gt;This is a sample post with a large feature image up top and tons of text. Odio ad blue bottle vinyl, 90&amp;rsquo;s narwhal commodo bitters pour-over nostrud. Ugh est hashtag in, fingerstache adipisicing laboris esse Pinterest shabby chic Portland. Shoreditch bicycle rights anim, flexitarian laboris put a bird on it vinyl cupidatat narwhal. Hashtag artisan skateboard, flannel Bushwick nesciunt salvia aute fixie do plaid post-ironic dolor McSweeney&amp;rsquo;s. Cliche pour-over chambray nulla four loko skateboard sapiente hashtag.&lt;/p&gt;

&lt;p&gt;Vero laborum commodo occupy. Semiotics voluptate mumblecore pug. Cosby sweater ullamco quinoa ennui assumenda, sapiente occupy delectus lo-fi. Ea fashion axe Marfa cillum aliquip. Retro Bushwick keytar cliche. Before they sold out sustainable gastropub Marfa readymade, ethical Williamsburg skateboard brunch qui consectetur gentrify semiotics. Mustache cillum irony, fingerstache magna pour-over keffiyeh tousled selfies.&lt;/p&gt;

&lt;h2 id=&#34;cupidatat-90-s-lo-fi-authentic-try-hard&#34;&gt;Cupidatat 90&amp;rsquo;s lo-fi authentic try-hard&lt;/h2&gt;

&lt;p&gt;In pug Portland incididunt mlkshk put a bird on it vinyl quinoa. Terry Richardson shabby chic +1, scenester Tonx excepteur tempor fugiat voluptate fingerstache aliquip nisi next level. Farm-to-table hashtag Truffaut, Odd Future ex meggings gentrify single-origin coffee try-hard 90&amp;rsquo;s.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Sartorial hoodie&lt;/li&gt;
&lt;li&gt;Labore viral forage&lt;/li&gt;
&lt;li&gt;Tote bag selvage&lt;/li&gt;
&lt;li&gt;DIY exercitation et id ugh tumblr church-key&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Incididunt umami sriracha, ethical fugiat VHS ex assumenda yr irure direct trade. Marfa Truffaut bicycle rights, kitsch placeat Etsy kogi asymmetrical. Beard locavore flexitarian, kitsch photo booth hoodie plaid ethical readymade leggings yr.&lt;/p&gt;

&lt;p&gt;Aesthetic odio dolore, meggings disrupt qui readymade stumptown brunch Terry Richardson pour-over gluten-free. Banksy american apparel in selfies, biodiesel flexitarian organic meh wolf quinoa gentrify banjo kogi. Readymade tofu ex, scenester dolor umami fingerstache occaecat fashion axe Carles jean shorts minim. Keffiyeh fashion axe nisi Godard mlkshk dolore. Lomo you probably haven&amp;rsquo;t heard of them eu non, Odd Future Truffaut pug keytar meggings McSweeney&amp;rsquo;s Pinterest cred. Etsy literally aute esse, eu bicycle rights qui meggings fanny pack. Gentrify leggings pug flannel duis.&lt;/p&gt;

&lt;h2 id=&#34;forage-occaecat-cardigan-qui&#34;&gt;Forage occaecat cardigan qui&lt;/h2&gt;

&lt;p&gt;Fashion axe hella gastropub lo-fi kogi 90&amp;rsquo;s aliquip +1 veniam delectus tousled. Cred sriracha locavore gastropub kale chips, iPhone mollit sartorial. Anim dolore 8-bit, pork belly dolor photo booth aute flannel small batch. Dolor disrupt ennui, tattooed whatever salvia Banksy sartorial roof party selfies raw denim sint meh pour-over. Ennui eu cardigan sint, gentrify iPhone cornhole.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Whatever velit occaecat quis deserunt gastropub, leggings elit tousled roof party 3 wolf moon kogi pug blue bottle ea. Fashion axe shabby chic Austin quinoa pickled laborum bitters next level, disrupt deep v accusamus non fingerstache.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Tote bag asymmetrical elit sunt. Occaecat authentic Marfa, hella McSweeney&amp;rsquo;s next level irure veniam master cleanse. Sed hoodie letterpress artisan wolf leggings, 3 wolf moon commodo ullamco. Anim occupy ea labore Terry Richardson. Tofu ex master cleanse in whatever pitchfork banh mi, occupy fugiat fanny pack Austin authentic. Magna fugiat 3 wolf moon, labore McSweeney&amp;rsquo;s sustainable vero consectetur. Gluten-free disrupt enim, aesthetic fugiat jean shorts trust fund keffiyeh magna try-hard.&lt;/p&gt;

&lt;h2 id=&#34;hoodie-duis&#34;&gt;Hoodie Duis&lt;/h2&gt;

&lt;p&gt;Actually salvia consectetur, hoodie duis lomo YOLO sunt sriracha. Aute pop-up brunch farm-to-table odio, salvia irure occaecat. Sriracha small batch literally skateboard. Echo Park nihil hoodie, aliquip forage artisan laboris. Trust fund reprehenderit nulla locavore. Stumptown raw denim kitsch, keffiyeh nulla twee dreamcatcher fanny pack ullamco 90&amp;rsquo;s pop-up est culpa farm-to-table. Selfies 8-bit do pug odio.&lt;/p&gt;

&lt;h3 id=&#34;thundercats-ho&#34;&gt;Thundercats Ho!&lt;/h3&gt;

&lt;p&gt;Fingerstache thundercats Williamsburg, deep v scenester Banksy ennui vinyl selfies mollit biodiesel duis odio pop-up. Banksy 3 wolf moon try-hard, sapiente enim stumptown deep v ad letterpress. Squid beard brunch, exercitation raw denim yr sint direct trade. Raw denim narwhal id, flannel DIY McSweeney&amp;rsquo;s seitan. Letterpress artisan bespoke accusamus, meggings laboris consequat Truffaut qui in seitan. Sustainable cornhole Schlitz, twee Cosby sweater banh mi deep v forage letterpress flannel whatever keffiyeh. Sartorial cred irure, semiotics ethical sed blue bottle nihil letterpress.&lt;/p&gt;

&lt;p&gt;Occupy et selvage squid, pug brunch blog nesciunt hashtag mumblecore skateboard yr kogi. Ugh small batch swag four loko. Fap post-ironic qui tote bag farm-to-table american apparel scenester keffiyeh vero, swag non pour-over gentrify authentic pitchfork. Schlitz scenester lo-fi voluptate, tote bag irony bicycle rights pariatur vero Vice freegan wayfarers exercitation nisi shoreditch. Chambray tofu vero sed. Street art swag literally leggings, Cosby sweater mixtape PBR lomo Banksy non in pitchfork ennui McSweeney&amp;rsquo;s selfies. Odd Future Banksy non authentic.&lt;/p&gt;

&lt;p&gt;Aliquip enim artisan dolor post-ironic. Pug tote bag Marfa, deserunt pour-over Portland wolf eu odio intelligentsia american apparel ugh ea. Sunt viral et, 3 wolf moon gastropub pug id. Id fashion axe est typewriter, mlkshk Portland art party aute brunch. Sint pork belly Cosby sweater, deep v mumblecore kitsch american apparel. Try-hard direct trade tumblr sint skateboard. Adipisicing bitters excepteur biodiesel, pickled gastropub aute veniam.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>A Post with Images</title>
      <link>http://ctownsen357.github.io/posts/sample-post-images/</link>
      <pubDate>Wed, 22 May 2013 00:00:00 +0000</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/sample-post-images/</guid>
      <description>

&lt;p&gt;Here are some examples of what a post with images might look like. If you want to display two or three images next to each other responsively use &lt;code&gt;figure&lt;/code&gt; with the appropriate &lt;code&gt;class&lt;/code&gt;. Each instance of &lt;code&gt;figure&lt;/code&gt; is auto-numbered and displayed in the caption.&lt;/p&gt;

&lt;h2 id=&#34;figures-for-images-or-video&#34;&gt;Figures (for images or video)&lt;/h2&gt;

&lt;h3 id=&#34;one-up&#34;&gt;One Up&lt;/h3&gt;

&lt;figure&gt;
    &lt;a href=&#34;//farm9.staticflickr.com/8426/7758832526_cc8f681e48_b.jpg&#34;&gt;&lt;img src=&#34;//farm9.staticflickr.com/8426/7758832526_cc8f681e48_c.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;figcaption&gt;&lt;a href=&#34;//www.flickr.com/photos/80901381@N04/7758832526/&#34; title=&#34;Morning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr&#34;&gt;Morning Fog Emerging From Trees by A Guy Taking Pictures, on Flickr&lt;/a&gt;.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;two-up&#34;&gt;Two Up&lt;/h3&gt;

&lt;p&gt;Apply the &lt;code&gt;half&lt;/code&gt; class like so to display two images side by side that share the same caption.&lt;/p&gt;
&lt;figure class=&#34;half&#34;&gt;
	&lt;img src=&#34;http://ctownsen357.github.io/images/image-filename-1.jpg&#34; alt=&#34;&#34;&gt;
	&lt;img src=&#34;http://ctownsen357.github.io/images/image-filename-2.jpg&#34; alt=&#34;&#34;&gt;
	&lt;figcaption&gt;Caption describing these two images.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And you&amp;rsquo;ll get something that looks like this:&lt;/p&gt;

&lt;figure class=&#34;half&#34;&gt;
    &lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;
    &lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;
    &lt;figcaption&gt;Two images.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;h3 id=&#34;three-up&#34;&gt;Three Up&lt;/h3&gt;

&lt;p&gt;Apply the &lt;code&gt;third&lt;/code&gt; class like so to display three images side by side that share the same caption.&lt;/p&gt;
&lt;figure class=&#34;third&#34;&gt;
	&lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
	&lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
	&lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
	&lt;figcaption&gt;Caption describing these three images.&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And you&amp;rsquo;ll get something that looks like this:&lt;/p&gt;

&lt;figure class=&#34;third&#34;&gt;
    &lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;a href=&#34;//placehold.it/1200x600.jpg&#34;&gt;&lt;img src=&#34;//placehold.it/600x300.jpg&#34; alt=&#34;&#34;&gt;&lt;/a&gt;
    &lt;figcaption&gt;Three images.&lt;/figcaption&gt;
&lt;/figure&gt;
</description>
    </item>
    
  </channel>
</rss>