<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ctownsen357@github.io</title>
    <link>http://ctownsen357.github.io/categories/development/index.xml</link>
    <description>Recent content on ctownsen357@github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <atom:link href="http://ctownsen357.github.io/categories/development/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Manual CoreOS Update</title>
      <link>http://ctownsen357.github.io/posts/manual-coreos-update/</link>
      <pubDate>Thu, 03 Nov 2016 17:00:49 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/manual-coreos-update/</guid>
      <description>&lt;p&gt;{{ template &amp;ldquo;_internal/google_analytics_async.html&amp;rdquo; . }}&lt;/p&gt;

&lt;p&gt;This forces a manual update if one is available:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;update_engine_client -update
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Argument List Too Long</title>
      <link>http://ctownsen357.github.io/posts/argument-list-too-log/</link>
      <pubDate>Tue, 01 Nov 2016 15:47:38 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/argument-list-too-log/</guid>
      <description>&lt;p&gt;You know it before you even try.  You try anyway.  Something like trying to bzip2  316,387 CSV files representing ~ 10TB of data.  You know it will be at least &lt;sup&gt;1&lt;/sup&gt;&amp;frasl;&lt;sub&gt;10&lt;/sub&gt; the size and R can handle the bzip2 files directly so you call bzip2 and get the argument list too long error.&lt;/p&gt;

&lt;p&gt;Find and xargs to the rescue!  Also, lbzip2 because you really don&amp;rsquo;t want to wait on bzip2 any more than you have to.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;find path_to_files/ -name &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;*.csv&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; xargs -P &lt;span style=&#34;color: #ae81ff&#34;&gt;5&lt;/span&gt; lbzip2
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; you&amp;rsquo;ll want to balance the number of parallel lbzip2 instances (or whatever you are running) as indicated by -P 5 above, balance that with the fact that lbzip2 runs in parallel too.&lt;/p&gt;

&lt;p&gt;It still took a long time to compress 316,387 files but it went a whole lot faster with parallel instances of parallel bzip2 using the xargs -P flag.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>CoreOS Mount NTFS Share</title>
      <link>http://ctownsen357.github.io/posts/coreos-mount-ntfs-share/</link>
      <pubDate>Tue, 01 Nov 2016 14:12:12 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/coreos-mount-ntfs-share/</guid>
      <description>&lt;p&gt;I had the need to mount an NTFS share for an application that was connecting to a SQL Server database and required that a share be mapped.  While testing from my CentOS 7 desktop, creating the share was trivial.  Not so much once I transitioned over to a CoreOS machine where I was to deploy for user testing.   This is how I got around that problem:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;docker run -t -i -v /tmp:/host_tmp fedora /bin/bash
yum groupinstall -y &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Development Tools&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;Development Libraries&amp;quot;&lt;/span&gt;
yum install -y tar bzip2

curl https://download.samba.org/pub/linux-cifs/cifs-utils/cifs-utils-6.3.tar.bz2 &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; bunzip2 -c - &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; tar -xvf -
&lt;span style=&#34;color: #f8f8f2&#34;&gt;cd&lt;/span&gt; cifs-utils-6.3/
./configure &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; make
cp mount.cifs /host_tmp/
&lt;span style=&#34;color: #f8f8f2&#34;&gt;exit&lt;/span&gt;

sudo mkdir /media/foo
sudo /tmp/mount.cifs &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;quot;//1.1.1.1/ntfs_share&amp;quot;&lt;/span&gt; -o &lt;span style=&#34;color: #f8f8f2&#34;&gt;username&lt;/span&gt;&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;winuser,domain&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;mydomain.com,rw,dir_mode&lt;span style=&#34;color: #f92672&#34;&gt;=&lt;/span&gt;0775,noperm /media/foo/ 
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Originally &lt;a href=&#34;https://gist.github.com/pantelis/540a19262cacc841fb0a&#34;&gt;found here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Monitor Docker Events with Awk</title>
      <link>http://ctownsen357.github.io/posts/awk-mon/</link>
      <pubDate>Tue, 01 Nov 2016 09:38:04 -0400</pubDate>
      
      <guid>http://ctownsen357.github.io/posts/awk-mon/</guid>
      <description>&lt;p&gt;I recently wrote a Docker event monitor in Go as an excercise to demonstrate some proficiency in Go and Docker.  Before getting started I was thinking about how it could be done with piping, bash, and awk.  It was actually really easy to do.  Some of the excercise requirements were:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The service should monitor the Docker API for restart events&lt;/li&gt;
&lt;li&gt;The service should run an arbitrary command in response to that event.&lt;/li&gt;
&lt;li&gt;The arbitrary command should be supplied via a config file.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The pipe, bash, awk solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #272822&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #f8f8f2&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39; pwd&amp;#39;&lt;/span&gt; &amp;gt; cmd.txt &lt;span style=&#34;color: #f92672&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; docker events &lt;span style=&#34;color: #f8f8f2&#34;&gt;|&lt;/span&gt; awk &lt;span style=&#34;color: #e6db74&#34;&gt;&amp;#39;/container restart/{system(&amp;quot;echo docker exec &amp;quot; $4 &amp;quot; $(cat cmd.txt) | bash -&amp;quot;)}&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This pipes the pwd command into a file and then pipes the stream from docker events into awk which is searching for the restart event.  When the restart event is encountered it executes the arbitrary command from the text file against the restarted container.  The command in the text file could be replaced with any desired command.&lt;/p&gt;

&lt;p&gt;There were other requirements that made it interesting to think through in Go.  I&amp;rsquo;ll be posting the entire excercise and my code soon.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>